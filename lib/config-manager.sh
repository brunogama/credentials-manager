#!/bin/bash
# lib/config-manager.sh
# Security configuration management library for credential management scripts

# Global configuration variables with secure defaults
# These variables are exported for use by other scripts
export UMASK=077
export FILE_PERMISSIONS=600
export DIR_PERMISSIONS=700
export SESSION_TIMEOUT=1800
export AUTO_CLEANUP=true
export AUDIT_LOGGING=true
export AUDIT_LOG_RETENTION_DAYS=90
export AUDIT_LOG_MAX_SIZE=10485760
export REQUIRE_SECURE_ENVIRONMENT=false
export WARN_SSH_CONNECTIONS=true
export WARN_SCREEN_RECORDING=true
export REQUIRE_VPN=false
export VERIFY_SSL_CERTS=true
export FORCE_HTTPS=true
export ENABLE_HSM=false
export ENABLE_BIOMETRIC=false
export ENABLE_GPG_SIGNING=true
export BACKUP_ENABLED=true
export BACKUP_RETENTION_DAYS=30
export BACKUP_ENCRYPTION=true
export SECURE_TEMP_FILES=true
export TEMP_FILE_OVERWRITE=true
export STRICT_INPUT_VALIDATION=true
export MAX_INPUT_LENGTH=256
export VALIDATE_SERVICE_NAMES=true
export VALIDATE_GIT_URLS=true

# Load security configuration from file
load_security_config() {
  local config_file="$HOME/.credmatch/security.conf"

  # Ensure .credmatch directory exists with secure permissions
  if [[ ! -d "$HOME/.credmatch" ]]; then
    mkdir -p "$HOME/.credmatch" || {
      echo "Error: Failed to create .credmatch directory" >&2
      return 1
    }
    chmod 700 "$HOME/.credmatch"
  fi

  # Load configuration if exists
  if [[ -f "$config_file" ]]; then
    # Validate config file permissions
    if ! validate_config_permissions "$config_file"; then
      echo "Warning: Configuration file has insecure permissions, fixing..." >&2
      chmod 600 "$config_file" || {
        echo "Error: Failed to secure configuration file permissions" >&2
        return 1
      }
    fi

    # Source configuration with error handling
    # shellcheck source=/dev/null
    if source "$config_file" 2>/dev/null; then
      echo "Configuration loaded from $config_file" >&2
    else
      echo "Warning: Failed to load configuration file, using defaults" >&2
    fi
  else
    # Create default configuration if it doesn't exist
    if create_default_config; then
      echo "Default configuration created at $config_file" >&2
    else
      echo "Warning: Failed to create default configuration, using built-in defaults" >&2
    fi
  fi

  # Validate loaded configuration
  if ! validate_config_values; then
    echo "Warning: Invalid configuration values detected, using safe defaults" >&2
    reset_to_safe_defaults
  fi

  # Apply umask setting
  umask "$UMASK"

  return 0
}

# Validate configuration file permissions
validate_config_permissions() {
  local config_file="$1"
  local perms

  if [[ ! -f "$config_file" ]]; then
    return 1
  fi

  # Get file permissions (works on both macOS and Linux)
  perms=$(stat -f "%A" "$config_file" 2>/dev/null || stat -c "%a" "$config_file" 2>/dev/null)

  if [[ "$perms" == "600" ]]; then
    return 0
  else
    return 1
  fi
}

# Create default configuration file
create_default_config() {
  local config_file="$HOME/.credmatch/security.conf"

  cat > "$config_file" << 'EOF'
# ~/.credmatch/security.conf
# Security configuration for credential management scripts
# Generated by credmatch security configuration system

# File permissions
UMASK=077
FILE_PERMISSIONS=600
DIR_PERMISSIONS=700

# Session management
SESSION_TIMEOUT=1800
AUTO_CLEANUP=true

# Audit logging
AUDIT_LOGGING=true
AUDIT_LOG_RETENTION_DAYS=90
AUDIT_LOG_MAX_SIZE=10485760

# Environment security
REQUIRE_SECURE_ENVIRONMENT=false
WARN_SSH_CONNECTIONS=true
WARN_SCREEN_RECORDING=true

# Network security
REQUIRE_VPN=false
VERIFY_SSL_CERTS=true
FORCE_HTTPS=true

# Advanced features
ENABLE_HSM=false
ENABLE_BIOMETRIC=false
ENABLE_GPG_SIGNING=true

# Backup and recovery
BACKUP_ENABLED=true
BACKUP_RETENTION_DAYS=30
BACKUP_ENCRYPTION=true

# Temporary file security
SECURE_TEMP_FILES=true
TEMP_FILE_OVERWRITE=true

# Input validation
STRICT_INPUT_VALIDATION=true
MAX_INPUT_LENGTH=256
VALIDATE_SERVICE_NAMES=true
VALIDATE_GIT_URLS=true
EOF

  if chmod 600 "$config_file"; then
    return 0
  else
    echo "Error: Failed to secure default configuration file" >&2
    return 1
  fi
}

# Validate configuration values
validate_config_values() {
  local valid=true

  # Validate numeric values
  if ! [[ "$UMASK" =~ ^[0-7]{3}$ ]]; then
    echo "Warning: Invalid UMASK value: $UMASK" >&2
    valid=false
  fi

  if ! [[ "$FILE_PERMISSIONS" =~ ^[0-7]{3}$ ]]; then
    echo "Warning: Invalid FILE_PERMISSIONS value: $FILE_PERMISSIONS" >&2
    valid=false
  fi

  if ! [[ "$DIR_PERMISSIONS" =~ ^[0-7]{3}$ ]]; then
    echo "Warning: Invalid DIR_PERMISSIONS value: $DIR_PERMISSIONS" >&2
    valid=false
  fi

  if ! [[ "$SESSION_TIMEOUT" =~ ^[0-9]+$ ]] || [[ "$SESSION_TIMEOUT" -lt 300 ]] || [[ "$SESSION_TIMEOUT" -gt 86400 ]]; then
    echo "Warning: Invalid SESSION_TIMEOUT value: $SESSION_TIMEOUT (must be 300-86400 seconds)" >&2
    valid=false
  fi

  if ! [[ "$AUDIT_LOG_RETENTION_DAYS" =~ ^[0-9]+$ ]] || [[ "$AUDIT_LOG_RETENTION_DAYS" -lt 1 ]] || [[ "$AUDIT_LOG_RETENTION_DAYS" -gt 365 ]]; then
    echo "Warning: Invalid AUDIT_LOG_RETENTION_DAYS value: $AUDIT_LOG_RETENTION_DAYS (must be 1-365 days)" >&2
    valid=false
  fi

  if ! [[ "$AUDIT_LOG_MAX_SIZE" =~ ^[0-9]+$ ]] || [[ "$AUDIT_LOG_MAX_SIZE" -lt 1048576 ]]; then
    echo "Warning: Invalid AUDIT_LOG_MAX_SIZE value: $AUDIT_LOG_MAX_SIZE (must be at least 1MB)" >&2
    valid=false
  fi

  if ! [[ "$MAX_INPUT_LENGTH" =~ ^[0-9]+$ ]] || [[ "$MAX_INPUT_LENGTH" -lt 64 ]] || [[ "$MAX_INPUT_LENGTH" -gt 4096 ]]; then
    echo "Warning: Invalid MAX_INPUT_LENGTH value: $MAX_INPUT_LENGTH (must be 64-4096 characters)" >&2
    valid=false
  fi

  # Validate boolean values
  for var in AUTO_CLEANUP AUDIT_LOGGING REQUIRE_SECURE_ENVIRONMENT WARN_SSH_CONNECTIONS WARN_SCREEN_RECORDING REQUIRE_VPN VERIFY_SSL_CERTS FORCE_HTTPS ENABLE_HSM ENABLE_BIOMETRIC ENABLE_GPG_SIGNING BACKUP_ENABLED BACKUP_ENCRYPTION SECURE_TEMP_FILES TEMP_FILE_OVERWRITE STRICT_INPUT_VALIDATION VALIDATE_SERVICE_NAMES VALIDATE_GIT_URLS; do
    local value
    eval "value=\$$var"
    if [[ "$value" != "true" && "$value" != "false" ]]; then
      echo "Warning: Invalid boolean value for $var: $value" >&2
      valid=false
    fi
  done

  if [[ "$valid" == "true" ]]; then
    return 0
  else
    return 1
  fi
}

# Reset to safe defaults
reset_to_safe_defaults() {
  UMASK=077
  FILE_PERMISSIONS=600
  DIR_PERMISSIONS=700
  SESSION_TIMEOUT=1800
  AUTO_CLEANUP=true
  AUDIT_LOGGING=true
  AUDIT_LOG_RETENTION_DAYS=90
  AUDIT_LOG_MAX_SIZE=10485760
  REQUIRE_SECURE_ENVIRONMENT=false
  WARN_SSH_CONNECTIONS=true
  WARN_SCREEN_RECORDING=true
  REQUIRE_VPN=false
  VERIFY_SSL_CERTS=true
  FORCE_HTTPS=true
  ENABLE_HSM=false
  ENABLE_BIOMETRIC=false
  ENABLE_GPG_SIGNING=true
  BACKUP_ENABLED=true
  BACKUP_RETENTION_DAYS=30
  BACKUP_ENCRYPTION=true
  SECURE_TEMP_FILES=true
  TEMP_FILE_OVERWRITE=true
  STRICT_INPUT_VALIDATION=true
  MAX_INPUT_LENGTH=256
  VALIDATE_SERVICE_NAMES=true
  VALIDATE_GIT_URLS=true
}

# Get configuration value with fallback
get_config_value() {
  local key="$1"
  local default_value="$2"
  local value

  eval "value=\$$key"
  if [[ -n "$value" ]]; then
    echo "$value"
  else
    echo "$default_value"
  fi
}

# Update configuration value
update_config_value() {
  local key="$1"
  local value="$2"
  local config_file="$HOME/.credmatch/security.conf"

  if [[ ! -f "$config_file" ]]; then
    echo "Error: Configuration file not found" >&2
    return 1
  fi

  # Validate the new value based on the key
  case "$key" in
    UMASK|FILE_PERMISSIONS|DIR_PERMISSIONS)
      if ! [[ "$value" =~ ^[0-7]{3}$ ]]; then
        echo "Error: Invalid permission value: $value" >&2
        return 1
      fi
      ;;
    SESSION_TIMEOUT)
      if ! [[ "$value" =~ ^[0-9]+$ ]] || [[ "$value" -lt 300 ]] || [[ "$value" -gt 86400 ]]; then
        echo "Error: Invalid session timeout: $value (must be 300-86400 seconds)" >&2
        return 1
      fi
      ;;
    *_ENABLED|*_CLEANUP|*_LOGGING|*_VALIDATION|REQUIRE_*|WARN_*|VERIFY_*|FORCE_*|ENABLE_*)
      if [[ "$value" != "true" && "$value" != "false" ]]; then
        echo "Error: Invalid boolean value: $value" >&2
        return 1
      fi
      ;;
  esac

  # Update the configuration file
  if grep -q "^$key=" "$config_file"; then
    # Update existing value
    sed -i.bak "s/^$key=.*/$key=$value/" "$config_file" && rm -f "$config_file.bak"
  else
    # Add new value
    echo "$key=$value" >> "$config_file"
  fi

  # Reload configuration
  load_security_config
}

# Display current configuration
show_config() {
  echo "Current Security Configuration:"
  echo "=============================="
  echo "File Permissions:"
  echo "  UMASK: $UMASK"
  echo "  FILE_PERMISSIONS: $FILE_PERMISSIONS"
  echo "  DIR_PERMISSIONS: $DIR_PERMISSIONS"
  echo ""
  echo "Session Management:"
  echo "  SESSION_TIMEOUT: $SESSION_TIMEOUT seconds"
  echo "  AUTO_CLEANUP: $AUTO_CLEANUP"
  echo ""
  echo "Audit Logging:"
  echo "  AUDIT_LOGGING: $AUDIT_LOGGING"
  echo "  AUDIT_LOG_RETENTION_DAYS: $AUDIT_LOG_RETENTION_DAYS"
  echo "  AUDIT_LOG_MAX_SIZE: $AUDIT_LOG_MAX_SIZE bytes"
  echo ""
  echo "Environment Security:"
  echo "  REQUIRE_SECURE_ENVIRONMENT: $REQUIRE_SECURE_ENVIRONMENT"
  echo "  WARN_SSH_CONNECTIONS: $WARN_SSH_CONNECTIONS"
  echo "  WARN_SCREEN_RECORDING: $WARN_SCREEN_RECORDING"
  echo ""
  echo "Network Security:"
  echo "  REQUIRE_VPN: $REQUIRE_VPN"
  echo "  VERIFY_SSL_CERTS: $VERIFY_SSL_CERTS"
  echo "  FORCE_HTTPS: $FORCE_HTTPS"
  echo ""
  echo "Advanced Features:"
  echo "  ENABLE_HSM: $ENABLE_HSM"
  echo "  ENABLE_BIOMETRIC: $ENABLE_BIOMETRIC"
  echo "  ENABLE_GPG_SIGNING: $ENABLE_GPG_SIGNING"
  echo ""
  echo "Input Validation:"
  echo "  STRICT_INPUT_VALIDATION: $STRICT_INPUT_VALIDATION"
  echo "  MAX_INPUT_LENGTH: $MAX_INPUT_LENGTH"
  echo "  VALIDATE_SERVICE_NAMES: $VALIDATE_SERVICE_NAMES"
  echo "  VALIDATE_GIT_URLS: $VALIDATE_GIT_URLS"
}
