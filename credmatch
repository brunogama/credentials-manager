#!/bin/bash

# CredMatch - Secure Credential Management with Git (like Fastlane Match)
# Usage: ./credmatch <command> [options]
#
# Note: This script uses intentional security features that may trigger shellcheck warnings:
# - History manipulation (HISTCONTROL, HISTIGNORE, set +o history) for sensitive data protection
# - Terminal control (stty) for secure password input without echo

# Security: Prevent command from being saved in shell history
# shellcheck disable=SC2034  # HISTCONTROL and HISTIGNORE are used by shell
set +H  # Disable history expansion
export HISTCONTROL=ignorespace:ignoredups
export HISTIGNORE="*credmatch*:*password*:*secret*"

# Trap to ensure cleanup on exit
trap 'cleanup_sensitive_vars' EXIT INT TERM

DEFAULT_STORE_DIR=".credmatch-store"
CREDENTIALS_FILE="credentials.enc"
CURRENT_DIR_MODE=false

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to cleanup sensitive variables
cleanup_sensitive_vars() {
    unset master_password
    unset input_password
    unset value
    unset credentials
    unset encrypted
    # Clear history of current session for this command if it contains sensitive data
    if command -v history >/dev/null 2>&1; then
        history -d "$(history 1 | awk '{print $1}')" 2>/dev/null || true
    fi
}

# Function to setup secure environment
setup_secure_environment() {
    # Temporarily disable history for this session
    # shellcheck disable=SC2039  # set +o history is intentional for security
    set +o history 2>/dev/null || true

    # Check if command line contains sensitive arguments
    local cmd_line="$*"
    if [[ "$cmd_line" =~ (store|fetch|list) ]] && [[ "$cmd_line" =~ [[:space:]][^[:space:]]*[a-zA-Z0-9]{8,} ]]; then
        echo -e "${YELLOW}⚠️  WARNING: Potential sensitive data detected in command line arguments!${NC}" >&2
        echo -e "${YELLOW}   For better security, omit passwords/keys from command line and let the script prompt you.${NC}" >&2
        echo -e "${YELLOW}   If you must use command line arguments, prefix your command with a space.${NC}" >&2
        echo "" >&2
    fi
}

# Function to display usage
usage() {
    echo "CredMatch - Secure Credential Management"
    echo ""
    echo "Usage: $0 <command> [options]"
    echo ""
    echo "Commands:"
    echo "  init <git_repo_url>                 Initialize credential store with git repository"
    echo "  init-here                           Use current directory as credential store"
    echo "  store <key> <value> [master_password] Store a credential (prompts for password if not given)"
    echo "  fetch <key> [master_password]       Fetch a specific credential (prompts for password if not given)"
    echo "  list [master_password]              List all stored credentials (prompts for password if not given)"
    echo "  sync                                Sync with remote repository"
    echo "  status                              Show repository status"
    echo ""
    echo "Examples:"
    echo "  $0 init git@github.com:user/credentials.git"
    echo "  $0 init-here"
    echo "  $0 store API_KEY \"abc123\"          # Will prompt for master password"
    echo "  $0 store API_KEY \"abc123\" mypassword"
    echo "  $0 fetch API_KEY                  # Will prompt for master password"
    echo "  $0 fetch API_KEY mypassword"
    echo "  $0 list                           # Will prompt for master password"
    echo "  $0 list mypassword"
    echo "  $0 sync"
    echo ""
    echo -e "${YELLOW}🔒 SECURITY RECOMMENDATIONS:${NC}"
    echo "  • ALWAYS omit passwords from command line arguments - let the script prompt you securely"
    echo "  • If you must provide passwords as arguments, prefix your command with a space: ' credmatch store ...'"
    echo "  • This script automatically prevents commands from being saved in shell history"
    echo "  • Use strong, unique master passwords for your credential stores"
    echo "  • Regularly sync your credential store and keep backups"
    echo ""
    echo -e "${RED}⚠️  NEVER share your master password or commit it to version control!${NC}"
    exit 1
}

# Check dependencies
check_dependencies() {
    if ! command -v git &> /dev/null; then
        echo -e "${RED}Error: Git is not installed or not in PATH${NC}"
        exit 1
    fi

    if ! command -v openssl &> /dev/null; then
        echo -e "${RED}Error: OpenSSL is not installed or not in PATH${NC}"
        exit 1
    fi
}

# Function to get store directory
get_store_dir() {
    if [ "$CURRENT_DIR_MODE" = true ]; then
        echo "."
    else
        echo "$DEFAULT_STORE_DIR"
    fi
}

# Function to check if store is initialized
check_store_initialized() {
    local store_dir
    store_dir=$(get_store_dir)

    if [ "$CURRENT_DIR_MODE" = true ]; then
        # For current directory mode, just check if it's a git repo
        if [ ! -d ".git" ]; then
            echo -e "${RED}Error: Current directory is not a git repository${NC}"
            echo "Run 'git init' first or use '$0 init <git_repo_url>' instead"
            exit 1
        fi
    else
        # For separate directory mode, check if .credmatch-store exists
        if [ ! -d "$store_dir" ]; then
            echo -e "${RED}Error: Credential store not initialized${NC}"
            echo "Run '$0 init <git_repo_url>' or '$0 init-here' first"
            exit 1
        fi
    fi
}

# Function to encrypt text
encrypt_text() {
    local password="$1"
    local text="$2"
    echo -n "$text" | openssl enc -aes-256-cbc -pbkdf2 -pass pass:"$password" 2>/dev/null | base64
}

# Function to decrypt text
decrypt_text() {
    local password="$1"
    local encrypted_text="$2"
    echo "$encrypted_text" | base64 -d | openssl enc -aes-256-cbc -d -pbkdf2 -pass pass:"$password" 2>/dev/null
}

# Function to securely read master password
get_master_password() {
    local prompt_message="${1:-Master Password}"
    local input_password=""

    # Ensure we're not echoing to terminal
    # shellcheck disable=SC2039  # stty is intentional for secure password input
    stty -echo 2>/dev/null || true

    echo -n "$prompt_message: " >&2
    read -rs input_password
    echo >&2

    # Re-enable echo
    # shellcheck disable=SC2039  # stty is intentional for secure password input
    stty echo 2>/dev/null || true

    if [ -z "$input_password" ]; then
        echo -e "${RED}Error: Master password cannot be empty.${NC}" >&2
        cleanup_sensitive_vars
        exit 1
    fi
    echo "$input_password"
}

# Function to initialize credential store
cmd_init() {
    local git_repo_url="$1"

    if [ -z "$git_repo_url" ]; then
        echo -e "${RED}Error: Git repository URL is required${NC}"
        echo "Usage: $0 init <git_repo_url>"
        exit 1
    fi

    if [ -d "$DEFAULT_STORE_DIR" ]; then
        echo -e "${YELLOW}Warning: Credential store already exists at $DEFAULT_STORE_DIR${NC}"
        read -rp "Do you want to remove it and start fresh? (y/N): " confirm
        if [[ $confirm =~ ^[Yy]$ ]]; then
            rm -rf "$DEFAULT_STORE_DIR"
        else
            exit 1
        fi
    fi

    echo -e "${BLUE}Initializing credential store...${NC}"

    # Clone the repository
    if git clone "$git_repo_url" "$DEFAULT_STORE_DIR" 2>/dev/null; then
        echo -e "${GREEN}✓ Successfully cloned repository${NC}"
    else
        # If clone fails, create new repo
        echo -e "${YELLOW}Repository doesn't exist or is empty. Creating new repository...${NC}"
        mkdir -p "$DEFAULT_STORE_DIR"
        cd "$DEFAULT_STORE_DIR" || exit
        git init
        git remote add origin "$git_repo_url"

        # Create initial empty credentials file
        echo "# CredMatch Encrypted Credentials Store" > README.md
        git add README.md
        git commit -m "Initial commit - CredMatch setup"

        # Try to push (might fail if repo doesn't exist on remote)
        git push -u origin main 2>/dev/null || git push -u origin master 2>/dev/null || true
        cd .. || exit
        echo -e "${GREEN}✓ Created new repository${NC}"
    fi

    echo -e "${GREEN}✓ Credential store initialized at $DEFAULT_STORE_DIR${NC}"
    echo -e "${BLUE}You can now store credentials using: $0 store <key> <value>${NC}"
}

# Function to initialize credential store in current directory
cmd_init_here() {
    if [ ! -d ".git" ]; then
        echo -e "${RED}Error: Current directory is not a git repository${NC}"
        echo "Please run 'git init' first or use '$0 init <git_repo_url>' instead"
        exit 1
    fi

    CURRENT_DIR_MODE=true
    echo -e "${BLUE}Initializing credential store in current directory...${NC}"
    echo -e "${GREEN}✓ Using current directory as credential store${NC}"
    echo -e "${BLUE}You can now store credentials using: $0 store <key> <value>${NC}"
}

# Function to store a credential
cmd_store() {
    local key="$1"
    local value="$2"
    local master_password="$3" # Optional

    if [ -z "$key" ] || [ -z "$value" ]; then
        echo -e "${RED}Error: Key and value are required${NC}"
        echo "Usage: $0 store <key> <value> [master_password]"
        exit 1
    fi

    if [ -z "$master_password" ]; then
        master_password=$(get_master_password "Enter Master Password for storing '$key'")
    fi

    check_store_initialized

    local store_dir
    store_dir=$(get_store_dir)
    cd "$store_dir" || exit

    # Pull latest changes
    git pull origin main 2>/dev/null || git pull origin master 2>/dev/null || true

    # Read existing credentials if file exists
    local credentials=""
    if [ -f "$CREDENTIALS_FILE" ]; then
        credentials=$(decrypt_text "$master_password" "$(cat "$CREDENTIALS_FILE")")
        if ! decrypt_text "$master_password" "$(cat "$CREDENTIALS_FILE")" >/dev/null 2>&1; then
            echo -e "${RED}Error: Failed to decrypt existing credentials. Check your master password.${NC}"
            cleanup_sensitive_vars
            exit 1
        fi
    fi

    # Remove existing key if it exists and add new one
    credentials=$(echo "$credentials" | grep -v "^$key=" | grep -v "^$")
    if [ -n "$credentials" ]; then
        credentials="$credentials"$'\n'"$key=$value"
    else
        credentials="$key=$value"
    fi

    # Encrypt and save
    encrypted=$(encrypt_text "$master_password" "$credentials")
    if ! encrypt_text "$master_password" "$credentials" >/dev/null 2>&1; then
        echo -e "${RED}Error: Failed to encrypt credentials${NC}"
        cleanup_sensitive_vars
        exit 1
    fi

    echo "$encrypted" > "$CREDENTIALS_FILE"

    # Commit and push
    git add "$CREDENTIALS_FILE"
    git commit -m "Update credential: $key" --no-verify 2>/dev/null || git commit -m "Update credential: $key" 2>/dev/null
    git push origin main 2>/dev/null || git push origin master 2>/dev/null || true

    if [ "$CURRENT_DIR_MODE" != true ]; then
        cd .. || exit
    fi
    echo -e "${GREEN}✓ Credential '$key' stored successfully${NC}"

    # Clear sensitive variables
    unset master_password value credentials encrypted
}

# Function to fetch a specific credential
cmd_fetch() {
    local key="$1"
    local master_password="$2" # Optional

    if [ -z "$key" ]; then
        echo -e "${RED}Error: Key is required${NC}"
        echo "Usage: $0 fetch <key> [master_password]"
        exit 1
    fi

    if [ -z "$master_password" ]; then
        master_password=$(get_master_password "Enter Master Password for fetching '$key'")
    fi

    check_store_initialized

    local store_dir
    store_dir=$(get_store_dir)
    cd "$store_dir" || exit

    # Pull latest changes
    git pull origin main 2>/dev/null || git pull origin master 2>/dev/null || true

    if [ ! -f "$CREDENTIALS_FILE" ]; then
        echo -e "${RED}Error: No credentials file found${NC}"
        cleanup_sensitive_vars
        exit 1
    fi

    # Decrypt and find key
    local credentials
    credentials=$(decrypt_text "$master_password" "$(cat "$CREDENTIALS_FILE")")
    if ! decrypt_text "$master_password" "$(cat "$CREDENTIALS_FILE")" >/dev/null 2>&1; then
        echo -e "${RED}Error: Failed to decrypt credentials. Check your master password.${NC}"
        cleanup_sensitive_vars
        exit 1
    fi

    local value
    value=$(echo "$credentials" | grep "^$key=" | cut -d'=' -f2-)

    if [ "$CURRENT_DIR_MODE" != true ]; then
        cd .. || exit
    fi

    if [ -n "$value" ]; then
        echo "$value"
    else
        echo -e "${RED}Error: Credential '$key' not found${NC}"
        cleanup_sensitive_vars
        exit 1
    fi

    # Clear sensitive variables
    unset master_password credentials value
}

# Function to list all credentials
cmd_list() {
    local master_password="$1" # Optional

    if [ -z "$master_password" ]; then
        master_password=$(get_master_password "Enter Master Password to list credentials")
    fi

    check_store_initialized

    local store_dir
    store_dir=$(get_store_dir)
    cd "$store_dir" || exit

    # Pull latest changes
    git pull origin main 2>/dev/null || git pull origin master 2>/dev/null || true

    if [ ! -f "$CREDENTIALS_FILE" ]; then
        echo -e "${YELLOW}No credentials stored yet${NC}"
        exit 0
    fi

    # Decrypt and display
    local credentials
    credentials=$(decrypt_text "$master_password" "$(cat "$CREDENTIALS_FILE")")
    if ! decrypt_text "$master_password" "$(cat "$CREDENTIALS_FILE")" >/dev/null 2>&1; then
        echo -e "${RED}Error: Failed to decrypt credentials. Check your master password.${NC}"
        cleanup_sensitive_vars
        exit 1
    fi

    if [ "$CURRENT_DIR_MODE" != true ]; then
        cd .. || exit
    fi

    if [ -n "$credentials" ]; then
        echo -e "${GREEN}Stored Credentials:${NC}"
        echo "$credentials" | while IFS='=' read -r key value; do
            if [ -n "$key" ]; then
                echo -e "${BLUE}$key${NC}=$value"
            fi
        done
    else
        echo -e "${YELLOW}No credentials found${NC}"
    fi

    # Clear sensitive variables
    unset master_password credentials
}

# Function to sync with remote
cmd_sync() {
    check_store_initialized

    local store_dir
    store_dir=$(get_store_dir)
    cd "$store_dir" || exit
    echo -e "${BLUE}Syncing with remote repository...${NC}"

    if git pull origin main 2>/dev/null || git pull origin master 2>/dev/null; then
        echo -e "${GREEN}✓ Successfully synced with remote${NC}"
    else
        echo -e "${YELLOW}Warning: Sync may have failed or no changes to pull${NC}"
    fi

    if [ "$CURRENT_DIR_MODE" != true ]; then
        cd .. || exit
    fi
}

# Function to show status
cmd_status() {
    check_store_initialized

    local store_dir
    store_dir=$(get_store_dir)
    cd "$store_dir" || exit
    echo -e "${BLUE}Repository Status:${NC}"
    echo ""

    # Show remote
    echo -e "${GREEN}Remote:${NC}"
    git remote -v
    echo ""

    # Show status
    echo -e "${GREEN}Git Status:${NC}"
    git status --short

    # Show last commit
    echo ""
    echo -e "${GREEN}Last Commit:${NC}"
    git log --oneline -1

    if [ "$CURRENT_DIR_MODE" != true ]; then
        cd .. || exit
    fi
}

# Detect if we should use current directory mode
detect_mode() {
    # Check if we're in a directory that looks like a credential store
    if [ -f "$CREDENTIALS_FILE" ] || [ -f ".git/config" ]; then
        # Check if .credmatch-store exists
        if [ ! -d "$DEFAULT_STORE_DIR" ]; then
            CURRENT_DIR_MODE=true
        fi
    fi
}

# Main script
check_dependencies

# Setup secure environment before processing arguments
setup_secure_environment "$@"

if [ $# -eq 0 ]; then
    usage
fi

command="$1"
shift

# Detect mode before processing commands
detect_mode

case "$command" in
    "init")
        cmd_init "$@"
        ;;
    "init-here")
        cmd_init_here "$@"
        ;;
    "store")
        cmd_store "$@"
        ;;
    "fetch")
        cmd_fetch "$@"
        ;;
    "list")
        cmd_list "$@"
        ;;
    "sync")
        cmd_sync "$@"
        ;;
    "status")
        cmd_status "$@"
        ;;
    *)
        echo -e "${RED}Error: Unknown command '$command'${NC}"
        echo "Did you mean 'init' instead of '--init'?"
        usage
        ;;
esac
